#!/usr/bin/perl -w

#====================================================================================================================================================#
#<use>
$|++; #---turn on the auto flush for the progress bar
use strict;
use File::Path;
use Time::HiRes qw( time );
use Storable;
use Getopt::Long;
use File::Basename;
use File::Spec::Functions qw(rel2abs);
use List::Util qw (sum shuffle min max);
use threads;
use threads::shared;
use Statistics::Descriptive;
use URI::Escape;
use Cwd 'abs_path';
#<\use>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<doc>
#	Description
#		This is a perl script to calculate and plot translation efficiency based on ribosome profilling and proteomic data
#
#	Input
#		--gffPath=				file path[compulsory]; path of the reference GFF for gene annotation;
#		--fastaPath=			file path [compulsory]; the path fasta file contains the genome sequence, for generating blank perl storables;
#		--riboSeqStorablePath=	file path [compulsory]; the path of the storable normalizedCountHsh generated by pileupPerlStorableCounter for the ribosome footprint library;
#		--RNACtrlStorablePath=	file path [compulsory]; the path of the storable normalizedCountHsh generated by pileupPerlStorableCounter for the RNA control library;
#		--proteomeDataTSVPath=	file path [compulsory]; the path of the TSV contain proteome data; column '0' has to be gene ID;
#		--maxThread=			integer [4]; max number of threads to be used;
#		--outDir=				directory path ['./BAMToReadEndPerlStorable/']; output directory;
#
#	Usage
#		/Volumes/A_MPro2TB/softwareForNGS/myPerlScripts/abundance/translationEfficiencyPlotter/v0.1/translationEfficiencyPlotter_v0.1.pl --proteomeDataTSVPath=/Volumes/F_Analysis/NGS/results/nicolaiTrypRiboFootprint/otherDocs/proteomeData/suppleTable3_proteomeData.tsv --RNACtrlStorablePath=/Volumes/F_Analysis/NGS/results/nicolaiTrypRiboFootprint/N25_footprint/pileupPerlStorableCounter/M5End.-40.M3End.0/storable/normalizedCountHsh.pls --riboSeqStorablePath=/Volumes/F_Analysis/NGS/results/nicolaiTrypRiboFootprint/pooled_footprint/pileupPerlStorableCounter/M5End.-40.M3End.0/storable/normalizedCountHsh.pls --fastaPath=/Volumes/A_MPro2TB/softwareForNGS/myPerlScripts/pipeLines/marathon/resources/genome/trypanosome/inUse/927/TbruceiTreu927Genomic_TriTrypDB-4.2.fasta --gffPath=/Volumes/A_MPro2TB/softwareForNGS/myPerlScripts/pipeLines/marathon/resources/genome/trypanosome/inUse/927/TbruceiTreu927_TriTrypDB-4.2.gff
#
#	v0.1
#	[Sat 24 Aug 2013 19:49:54 CEST]debut;
#
#<\doc>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<lastCmdCalled>
#
#	[2013-08-26 11:05]	/Volumes/A_MPro2TB/softwareForNGS/myPerlScripts/abundance/translationEfficiencyPlotter/v0.1/translationEfficiencyPlotter_v0.1.pl --proteomeDataTSVPath=/Volumes/F_Analysis/NGS/results/nicolaiTrypRiboFootprint/otherDocs/proteomeData/suppleTable3_proteomeData.tsv --RNACtrlStorablePath=/Volumes/F_Analysis/NGS/results/nicolaiTrypRiboFootprint/N25_footprint/pileupPerlStorableCounter/M5End.-40.M3End.0/storable/normalizedCountHsh.pls --riboSeqStorablePath=/Volumes/F_Analysis/NGS/results/nicolaiTrypRiboFootprint/pooled_footprint/pileupPerlStorableCounter/M5End.-40.M3End.0/storable/normalizedCountHsh.pls --fastaPath=/Volumes/A_MPro2TB/softwareForNGS/myPerlScripts/pipeLines/marathon/resources/genome/trypanosome/inUse/927/TbruceiTreu927Genomic_TriTrypDB-4.2.fasta --gffPath=/Volumes/A_MPro2TB/softwareForNGS/myPerlScripts/pipeLines/marathon/resources/genome/trypanosome/inUse/927/TbruceiTreu927_TriTrypDB-4.2.gff
#
#	/Volumes/A_MPro2TB/softwareForNGS/myPerlScripts/abundance/translationEfficiencyPlotter/v0.1/translationEfficiencyPlotter_v0.1.pl
#	--proteomeDataTSVPath=/Volumes/F_Analysis/NGS/results/nicolaiTrypRiboFootprint/otherDocs/proteomeData/suppleTable3_proteomeData.tsv
#	--RNACtrlStorablePath=/Volumes/F_Analysis/NGS/results/nicolaiTrypRiboFootprint/N25_footprint/pileupPerlStorableCounter/M5End.-40.M3End.0/storable/normalizedCountHsh.pls
#	--riboSeqStorablePath=/Volumes/F_Analysis/NGS/results/nicolaiTrypRiboFootprint/pooled_footprint/pileupPerlStorableCounter/M5End.-40.M3End.0/storable/normalizedCountHsh.pls
#	--fastaPath=/Volumes/A_MPro2TB/softwareForNGS/myPerlScripts/pipeLines/marathon/resources/genome/trypanosome/inUse/927/TbruceiTreu927Genomic_TriTrypDB-4.2.fasta
#	--gffPath=/Volumes/A_MPro2TB/softwareForNGS/myPerlScripts/pipeLines/marathon/resources/genome/trypanosome/inUse/927/TbruceiTreu927_TriTrypDB-4.2.gff
#
#<\lastCmdCalled>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<global>
my $globalScriptDirPath = dirname(rel2abs($0));
open DEBUGLOG, ">", "$globalScriptDirPath/debug.log.txt";
#<\global>
#====================================================================================================================================================#

#====================================================================================================================================================#
{	#Main sections lexical scope starts
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 0_startingTasks
#	primaryDependOnSub: printCMDLogOrFinishMessage|720, readParameters|920
#	secondaryDependOnSub: currentTime|240
#
#<section ID="startingTasks" num="0">
########################################################################## 
&printCMDLogOrFinishMessage("CMDLog");#->720

my ($gffPath, $fastaPath, $riboSeqStorablePath, $RNACtrlStorablePath, $proteomeDataTSVPath, $maxThread, $outDir) = &readParameters();#->920

#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 1_defineHardCodedParam
#	primaryDependOnSub: >none
#	secondaryDependOnSub: >none
#
#<section ID="defineHardCodedParam" num="1">
my $dataCutoffHsh_ref = {};
$dataCutoffHsh_ref->{'prot'} = 0;
$dataCutoffHsh_ref->{'ribo'} = 0;
$dataCutoffHsh_ref->{'RNA'} = 0;

my $proteomeDataTSVColumn = 9;#interger [compulsory]; the column in proteomeDataTSVPath to be taken. 1st column is 0;
#my $countDataType = 'UQNor';#RPKM, UQNor or RPM, chosen to plot
#my $countDataType = 'RPM';#RPKM, UQNor or RPM, chosen to plot
my $countDataType = 'RPKM';#RPKM, UQNor or RPM, chosen to plot
my $paramTag = "PC$proteomeDataTSVColumn.CT_$countDataType.MP$dataCutoffHsh_ref->{'prot'}.MR$dataCutoffHsh_ref->{'ribo'}.MR$dataCutoffHsh_ref->{'RNA'}";
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 2_defineOutDirPath
#	primaryDependOnSub: >none
#	secondaryDependOnSub: >none
#
#<section ID="defineOutDirPath" num="2">
my @mkDirAry;
my $resultDir = "$outDir/$paramTag/"; push @mkDirAry, $resultDir;
my $logDir = "$resultDir/log/"; push @mkDirAry, $logDir;
my $ggplotDirHsh_ref = {};
foreach (qw /dat pdf R log/) {
	$ggplotDirHsh_ref->{$_} = "$resultDir/ggplot/$_"; push @mkDirAry, $ggplotDirHsh_ref->{$_};
}

foreach my $dir (@mkDirAry) {system ("mkdir -pm 777 $dir");}
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 3_defineOutFilePath
#	primaryDependOnSub: >none
#	secondaryDependOnSub: >none
#
#<section ID="defineOutFilePath" num="3">
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 4_processInputData
#	primaryDependOnSub: getAllAbdnceData|257, getCtgryGeneInfo|290, readGFF_oneRNAPerGene|789, readMultiFasta|867
#	secondaryDependOnSub: currentTime|240, getProteomeData|326, getRiboOrRNAData|357, reportStatus|957
#
#<section ID="processInputData" num="4">
########################################################################## 
#----------Read Fasta
my ($fastaHsh_ref) = &readMultiFasta($fastaPath);#->867
my ($geneInfoHsh_ref) = &readGFF_oneRNAPerGene($gffPath);#->789

my @mRNAAry = qw/mRNA/;
my ($mRNAInfoHsh_ref, $mRNAByCntgHsh_ref)= &getCtgryGeneInfo($geneInfoHsh_ref, \@mRNAAry);#->290

my ($allAbdnceHsh_ref) = &getAllAbdnceData($proteomeDataTSVColumn, $countDataType, $riboSeqStorablePath, $RNACtrlStorablePath, $proteomeDataTSVPath, $mRNAInfoHsh_ref);#->257
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 5_plotRNAAndRiboCountTypeData
#	primaryDependOnSub: plotRNAAndRiboHistogram|657
#	secondaryDependOnSub: ggplotHistogram|385, ggplotMultiSampleHistogram|454, reportStatus|957
#
#<section ID="plotRNAAndRiboCountTypeData" num="5">
&plotRNAAndRiboHistogram($riboSeqStorablePath, $RNACtrlStorablePath, $countDataType, $ggplotDirHsh_ref);#->657
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 6_calculateAndPlotEfficiency
#	primaryDependOnSub: calculateEfficiency|188, plotComparisonScatterPlot|562, plotEfficiencyHistogram|598, printComparisonData|752
#	secondaryDependOnSub: ggplotHistogram|385, ggplotMultiSampleHistogram|454, ggplotXYScatterPlot|525, reportStatus|957
#
#<section ID="calculateAndPlotEfficiency" num="6">
my ($comparisonInfoHsh_ref) = &calculateEfficiency($allAbdnceHsh_ref, $dataCutoffHsh_ref);#->188
&plotEfficiencyHistogram($comparisonInfoHsh_ref, $ggplotDirHsh_ref);#->598
&plotComparisonScatterPlot($comparisonInfoHsh_ref, $ggplotDirHsh_ref);#->562
&printComparisonData($comparisonInfoHsh_ref, $logDir, $mRNAInfoHsh_ref);#->752
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 7_finishingTasks
#	primaryDependOnSub: printCMDLogOrFinishMessage|720
#	secondaryDependOnSub: currentTime|240
#
#<section ID="finishingTasks" num="7">
&printCMDLogOrFinishMessage("finishMessage");#->720
close DEBUGLOG;
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
}	#Main sections lexical scope ends
#====================================================================================================================================================#

sub calculateEfficiency {
#....................................................................................................................................................#
#	dependOnSub: reportStatus|957
#	appearInSub: >none
#	primaryAppearInSection: 6_calculateAndPlotEfficiency|160
#	secondaryAppearInSection: >none
#	input: $allAbdnceHsh_ref, $dataCutoffHsh_ref
#	output: $comparisonInfoHsh_ref
#	toCall: my ($comparisonInfoHsh_ref) = &calculateEfficiency($allAbdnceHsh_ref, $dataCutoffHsh_ref);
#	calledInLine: 165
#....................................................................................................................................................#
	my ($allAbdnceHsh_ref, $dataCutoffHsh_ref) = @_;
	
	#--define the numerator and denominator in the comparisons
	my $comparisonInfoHsh_ref = {};
	
	$comparisonInfoHsh_ref->{'prot.vs.ribo'}{'numerator'} = 'prot';
	$comparisonInfoHsh_ref->{'prot.vs.ribo'}{'denominator'} = 'ribo';

	$comparisonInfoHsh_ref->{'prot.vs.RNA'}{'numerator'} = 'prot';
	$comparisonInfoHsh_ref->{'prot.vs.RNA'}{'denominator'} = 'RNA';

	$comparisonInfoHsh_ref->{'ribo.vs.RNA'}{'numerator'} = 'ribo';
	$comparisonInfoHsh_ref->{'ribo.vs.RNA'}{'denominator'} = 'RNA';
	
	foreach my $comparison (keys %{$comparisonInfoHsh_ref}) {
		&reportStatus("Calculating efficiency for $comparison",10,"\n"); #->957
		
		my @tmpValAry = ();
		
		foreach my $mRNAID (keys %{$allAbdnceHsh_ref}) {
			my $numeratorVal = $allAbdnceHsh_ref->{$mRNAID}{$comparisonInfoHsh_ref->{$comparison}{'numerator'}};
			my $denominatorVal = $allAbdnceHsh_ref->{$mRNAID}{$comparisonInfoHsh_ref->{$comparison}{'denominator'}};
			next if ($numeratorVal <= $dataCutoffHsh_ref->{$comparisonInfoHsh_ref->{$comparison}{'numerator'}} or  $denominatorVal <= $dataCutoffHsh_ref->{$comparisonInfoHsh_ref->{$comparison}{'denominator'}});
			my $efficiencyVal = sprintf "%.5f", $numeratorVal/$denominatorVal;
			$comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'numeratorLinearVal'} = $numeratorVal;
			$comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'denominatorLinearVal'} = $denominatorVal;
			$comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'numeratorLog2Val'} = log($numeratorVal)/log(2);
			$comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'denominatorLog2Val'} = log($denominatorVal)/log(2);
			$comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'efficiencyVal'} = $efficiencyVal;
			push @tmpValAry, $efficiencyVal;
		}

		#--normalize all values by median
		my $valueStatObj = Statistics::Descriptive::Full->new();
		$valueStatObj->add_data(@tmpValAry);
		my $median = $valueStatObj->percentile(50);
		$comparisonInfoHsh_ref->{$comparison}{'data'}{$_}{'medianNorEfficiencyVal'} = sprintf "%.5f", $comparisonInfoHsh_ref->{$comparison}{'data'}{$_}{'efficiencyVal'}/$median foreach (keys %{$comparisonInfoHsh_ref->{$comparison}{'data'}});
	}
	
	return ($comparisonInfoHsh_ref);
}
sub currentTime {
#....................................................................................................................................................#
#	dependOnSub: >none
#	appearInSub: printCMDLogOrFinishMessage|720, readGFF_oneRNAPerGene|789, reportStatus|957
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 0_startingTasks|72, 4_processInputData|132, 7_finishingTasks|173
#	input: none
#	output: $runTime
#	toCall: my ($runTime) = &currentTime();
#	calledInLine: 739, 742, 747, 808, 972
#....................................................................................................................................................#
	
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $runTime = sprintf "%04d-%02d-%02d %02d:%02d", $year+1900, $mon+1,$mday,$hour,$min;	
	
	return $runTime;
}
sub getAllAbdnceData {
#....................................................................................................................................................#
#	dependOnSub: getProteomeData|326, getRiboOrRNAData|357
#	appearInSub: >none
#	primaryAppearInSection: 4_processInputData|132
#	secondaryAppearInSection: >none
#	input: $RNACtrlStorablePath, $countDataType, $mRNAInfoHsh_ref, $proteomeDataTSVColumn, $proteomeDataTSVPath, $riboSeqStorablePath
#	output: $allAbdnceHsh_ref
#	toCall: my ($allAbdnceHsh_ref) = &getAllAbdnceData($proteomeDataTSVColumn, $countDataType, $riboSeqStorablePath, $RNACtrlStorablePath, $proteomeDataTSVPath, $mRNAInfoHsh_ref);
#	calledInLine: 145
#....................................................................................................................................................#
	my ($proteomeDataTSVColumn, $countDataType, $riboSeqStorablePath, $RNACtrlStorablePath, $proteomeDataTSVPath, $mRNAInfoHsh_ref) = @_;
	
	my $allAbdnceHsh_ref = {};
	
	foreach my $mRNAID (keys %{$mRNAInfoHsh_ref}) {
		$allAbdnceHsh_ref->{$mRNAID}{$_} = 0 foreach (qw/prot RNA ribo/);
	}
	
	&getProteomeData($proteomeDataTSVPath, $allAbdnceHsh_ref, $proteomeDataTSVColumn);#->326
	{
		my $normalizedCountHshPlsPath = $RNACtrlStorablePath;
		my $riboOrRNA = 'RNA';
		&getRiboOrRNAData($normalizedCountHshPlsPath, $riboOrRNA, $countDataType, $allAbdnceHsh_ref);#->357
	}
	{
		my $normalizedCountHshPlsPath = $riboSeqStorablePath;
		my $riboOrRNA = 'ribo';
		&getRiboOrRNAData($normalizedCountHshPlsPath, $riboOrRNA, $countDataType, $allAbdnceHsh_ref);#->357
	}
	
	return ($allAbdnceHsh_ref);
}
sub getCtgryGeneInfo {
#....................................................................................................................................................#
#	dependOnSub: reportStatus|957
#	appearInSub: >none
#	primaryAppearInSection: 4_processInputData|132
#	secondaryAppearInSection: >none
#	input: $ctgryAry_ref, $geneInfoHsh_ref
#	output: $geneCtgryByCntgHsh_ref, $geneCtgryInfoHsh_ref
#	toCall: my ($geneCtgryInfoHsh_ref, $geneCtgryByCntgHsh_ref) = &getCtgryGeneInfo($geneInfoHsh_ref, $ctgryAry_ref);
#	calledInLine: 143
#....................................................................................................................................................#

	my ($geneInfoHsh_ref, $ctgryAry_ref) = @_;
	
	my $geneCtgryInfoHsh_ref = {};
	my $geneCtgryByCntgHsh_ref = {};
	
	my $ctgryStr = join ",", @{$ctgryAry_ref};

	&reportStatus("Filtering GFF on cgtry $ctgryStr", 10, "\n");#->957

	foreach my $geneID (keys %{$geneInfoHsh_ref}) {
		my $ctgry = $geneInfoHsh_ref->{$geneID}{'ctgry'};
		my $cntg = $geneInfoHsh_ref->{$geneID}{'cntg'};
		if (grep /^$ctgry$/, @{$ctgryAry_ref}) {
			%{$geneCtgryInfoHsh_ref->{$geneID}} = %{$geneInfoHsh_ref->{$geneID}};
			$geneCtgryByCntgHsh_ref->{$cntg}{$geneID}++;
		}
	}
	
	my $numGene = keys %{$geneCtgryInfoHsh_ref};
	
	&reportStatus("$numGene gene filtered on cgtry $ctgryStr", 10, "\n");#->957
	
	return $geneCtgryInfoHsh_ref, $geneCtgryByCntgHsh_ref;
}
sub getProteomeData {
#....................................................................................................................................................#
#	dependOnSub: reportStatus|957
#	appearInSub: getAllAbdnceData|257
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 4_processInputData|132
#	input: $allAbdnceHsh_ref, $proteomeDataTSVColumn, $proteomeDataTSVPath
#	output: 
#	toCall: &getProteomeData($proteomeDataTSVPath, $allAbdnceHsh_ref, $proteomeDataTSVColumn);
#	calledInLine: 275
#....................................................................................................................................................#
	my ($proteomeDataTSVPath, $allAbdnceHsh_ref, $proteomeDataTSVColumn) = @_;
	
	&reportStatus("Getting proteome data", 10, "\n");#->957
	my $numGene = 0;
	open PROFILE, "<", $proteomeDataTSVPath;
	<PROFILE>; #---skip the header
	while (<PROFILE>) {
		my @contentAry = split /\t/;
		foreach my $mRNAID (split /\;/, $contentAry[0]) {
			if ($allAbdnceHsh_ref->{$mRNAID} and $contentAry[$proteomeDataTSVColumn] =~ m/^\d+\.?\d*$/) {
				$numGene++;
				$allAbdnceHsh_ref->{$mRNAID}{'prot'} = $contentAry[$proteomeDataTSVColumn];#--http://stackoverflow.com/questions/3803850/how-do-i-decide-if-a-variable-is-numeric-in-perl
			}
		}
	}
	close PROFILE;
	&reportStatus("$numGene genes were found to have proteome data", 10, "\n");#->957

	return ();
}
sub getRiboOrRNAData {
#....................................................................................................................................................#
#	dependOnSub: reportStatus|957
#	appearInSub: getAllAbdnceData|257
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 4_processInputData|132
#	input: $allAbdnceHsh_ref, $countDataType, $normalizedCountHshPlsPath, $riboOrRNA
#	output: 
#	toCall: &getRiboOrRNAData($normalizedCountHshPlsPath, $riboOrRNA, $countDataType, $allAbdnceHsh_ref);
#	calledInLine: 279, 284
#....................................................................................................................................................#
	my ($normalizedCountHshPlsPath, $riboOrRNA, $countDataType, $allAbdnceHsh_ref) = @_;
	
	&reportStatus("Retrieving $countDataType from $riboOrRNA data", 10, "\n");#->957

	my $normalizedCountHsh_ref = retrieve($normalizedCountHshPlsPath);
	my $numGene = 0;
	foreach my $mRNAID (keys %{$normalizedCountHsh_ref->{'CDSRng'}}) {
		if ($allAbdnceHsh_ref->{$mRNAID} and $normalizedCountHsh_ref->{'CDSRng'}{$mRNAID}{$countDataType}{'s'} =~ m/^\d+\.?\d*$/) {
			$numGene++;
			$allAbdnceHsh_ref->{$mRNAID}{$riboOrRNA} = $normalizedCountHsh_ref->{'CDSRng'}{$mRNAID}{$countDataType}{'s'};
		}
	}
	
	&reportStatus("$numGene genes were found to have $riboOrRNA data", 10, "\n");#->957

	return ();
}
sub ggplotHistogram {
#....................................................................................................................................................#
#	dependOnSub: >none
#	appearInSub: plotEfficiencyHistogram|598, plotRNAAndRiboHistogram|657
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 5_plotRNAAndRiboCountTypeData|150, 6_calculateAndPlotEfficiency|160
#	input: $RScriptPath, $XAxis, $binWidth, $dataPath, $dataPtMax, $extraArg, $leftXAxisPercentileLimit, $log2OrLinear, $logPath, $pdfPath, $plotAry_ref, $rightXAxisPercentileLimit
#	output: $plotValueAry_ref
#	toCall: my ($plotValueAry_ref) = &ggplotHistogram($plotAry_ref, $dataPath, $pdfPath, $RScriptPath, $logPath, $leftXAxisPercentileLimit, $rightXAxisPercentileLimit, $XAxis, $binWidth, $dataPtMax, $extraArg, $log2OrLinear);
#	calledInLine: 633, 696
#....................................................................................................................................................#
	
	my ($plotAry_ref, $dataPath, $pdfPath, $RScriptPath, $logPath, $leftXAxisPercentileLimit, $rightXAxisPercentileLimit, $XAxis, $binWidth, $dataPtMax, $extraArg, $log2OrLinear) = @_;
	
	my $valueStatObj = Statistics::Descriptive::Full->new();
	$valueStatObj->add_data(@{$plotAry_ref});

	my $leftXAxisLimitValue;
	if ($leftXAxisPercentileLimit eq 'min') {
		$leftXAxisLimitValue = $valueStatObj->min();
	} else {
		$leftXAxisLimitValue = $valueStatObj->percentile($leftXAxisPercentileLimit);
	}

	my $rightXAxisLimitValue;
	if ($rightXAxisPercentileLimit eq 'max') {
		$rightXAxisLimitValue = $valueStatObj->max();
	} else {
		$rightXAxisLimitValue = $valueStatObj->percentile($rightXAxisPercentileLimit);
	}
	
	#---trim the end values
	my @trimmedAry = ();
	foreach my $value (@{$plotAry_ref}) {
		my $transformedValue = $value;
		if ($value > 0) {
			eval {$transformedValue = log($value)/log(2) if $log2OrLinear eq 'log2';};
			push @trimmedAry, $transformedValue if $value <= $rightXAxisLimitValue and $value >= $leftXAxisLimitValue;
		}
	}
	
	$dataPtMax = @trimmedAry if $dataPtMax > @trimmedAry;

	#---down sample the data point number
	my @shuffleIndexAry = shuffle(0..$#trimmedAry);
	my $plotValueAry_ref = ();
	
	open (PLOTDATA, ">", $dataPath);
	print PLOTDATA $XAxis."\n";
	foreach my $i (0..$dataPtMax-1) {
		my $shuffleValue = $trimmedAry[$shuffleIndexAry[$i]];
		push @{$plotValueAry_ref}, $shuffleValue;
		print PLOTDATA $shuffleValue."\n";
		
	}
	close PLOTDATA;
	
	open (R, ">", $RScriptPath);
	print R "library(ggplot2)"."\n";
	print R "dataFrame = read.table(file=\"$dataPath\", header=TRUE)"."\n";
	print R "ggplot(dataFrame, aes(x=$XAxis)) + ggtitle(\"Distribution of $XAxis $log2OrLinear scale [n=$dataPtMax]\") + geom_histogram(binwidth=$binWidth, aes(y = ..density.., fill = ..count..)) + geom_density() $extraArg"."\n";
	print R "ggsave(file=\"$pdfPath\")\n";
	close R;
	
	system ("R --slave --vanilla --file=$RScriptPath &>$logPath ");

	return $plotValueAry_ref;
	
}
sub ggplotMultiSampleHistogram {
#....................................................................................................................................................#
#	dependOnSub: >none
#	appearInSub: plotEfficiencyHistogram|598, plotRNAAndRiboHistogram|657
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 5_plotRNAAndRiboCountTypeData|150, 6_calculateAndPlotEfficiency|160
#	input: $RScriptPath, $XAxis, $binWidth, $dataPath, $dataPtMax, $extraArg, $leftXAxisPercentileLimit, $log2OrLinear, $logPath, $pdfPath, $plotAryHsh_ref, $rightXAxisPercentileLimit
#	output: none
#	toCall: &ggplotMultiSampleHistogram($plotAryHsh_ref, $dataPath, $pdfPath, $RScriptPath, $logPath, $leftXAxisPercentileLimit, $rightXAxisPercentileLimit, $XAxis, $binWidth, $dataPtMax, $extraArg, $log2OrLinear);
#	calledInLine: 651, 714
#....................................................................................................................................................#

	my ($plotAryHsh_ref, $dataPath, $pdfPath, $RScriptPath, $logPath, $leftXAxisPercentileLimit, $rightXAxisPercentileLimit, $XAxis, $binWidth, $dataPtMax, $extraArg, $log2OrLinear) = @_;
	
	open (PLOTDATA, ">", $dataPath);
	print PLOTDATA "sample\t$XAxis\n";

	foreach my $sample (keys %{$plotAryHsh_ref}) {
		
		my $plotAry_ref = $plotAryHsh_ref->{$sample};
	
		my $valueStatObj = Statistics::Descriptive::Full->new();
		$valueStatObj->add_data(@{$plotAry_ref});

		my $leftXAxisLimitValue;
		if ($leftXAxisPercentileLimit eq 'min') {
			$leftXAxisLimitValue = $valueStatObj->min();
		} else {
			$leftXAxisLimitValue = $valueStatObj->percentile($leftXAxisPercentileLimit);
		}

		my $rightXAxisLimitValue;
		if ($rightXAxisPercentileLimit eq 'max') {
			$rightXAxisLimitValue = $valueStatObj->max();
		} else {
			$rightXAxisLimitValue = $valueStatObj->percentile($rightXAxisPercentileLimit);
		}
	
		#---trim the end values
		my @trimmedAry = ();
		foreach my $value (@{$plotAry_ref}) {
			my $transformedValue = $value;
			if ($value > 0) {
				eval {$transformedValue = log($value)/log(2) if $log2OrLinear eq 'log2';};
				push @trimmedAry, $transformedValue if $value <= $rightXAxisLimitValue and $value >= $leftXAxisLimitValue;
			}
		}
		
		my $indivDataPtMax = $dataPtMax;
		$indivDataPtMax = @trimmedAry if $indivDataPtMax > @trimmedAry;

		#---down sample the data point number
		my @shuffleIndexAry = shuffle(0..$#trimmedAry);
		foreach my $i (0..$indivDataPtMax-1) {
			my $shuffleValue = $trimmedAry[$shuffleIndexAry[$i]];
			print PLOTDATA "$sample\t$shuffleValue\n";
		}
	
	}
	close PLOTDATA;

	open (R, ">", $RScriptPath);
	print R "library(ggplot2)"."\n";
	print R "dataFrame = read.table(file=\"$dataPath\", header=TRUE)"."\n";
	print R "ggplot(dataFrame, aes($XAxis, fill = sample)) + ggtitle(\"Distribution of $XAxis $log2OrLinear scale\") + geom_density(alpha = 0.2) $extraArg"."\n";
	print R "ggsave(file=\"$pdfPath\")\n";
	close R;
	
	system ("R --slave --vanilla --file=$RScriptPath &>$logPath ");

}
sub ggplotXYScatterPlot {
#....................................................................................................................................................#
#	dependOnSub: >none
#	appearInSub: plotComparisonScatterPlot|562
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 6_calculateAndPlotEfficiency|160
#	input: $RScriptPath, $XAxis, $YAxis, $dataPath, $logPath, $pdfPath, $plotAry_ref
#	output: none
#	toCall: &ggplotXYScatterPlot($XAxis, $YAxis, $plotAry_ref, $dataPath, $pdfPath, $RScriptPath, $logPath);
#	calledInLine: 590
#....................................................................................................................................................#

	my ($XAxis, $YAxis, $plotAry_ref, $dataPath, $pdfPath, $RScriptPath, $logPath) = @_;
	
	open (PLOTDATA, ">", $dataPath);
	print PLOTDATA join "", ((join "\t", ($XAxis, $YAxis)), "\n");
	foreach my $YXPair (@{$plotAry_ref}) {
		my ($XVal, $YVal) = split /,/, $YXPair;
		print PLOTDATA join "", ((join "\t", ($XVal, $YVal)), "\n");
	}
	close PLOTDATA;
	
	open (R, ">", $RScriptPath);
	print R "library(ggplot2)"."\n";
	print R "dataFrame = read.table(file=\"$dataPath\", header=TRUE)"."\n";
	print R "pearsonCor<-cor.test(dataFrame\$$XAxis, dataFrame\$$YAxis, method = \"pearson\")"."\n";
	print R "title<-paste(\"Pearson's R = \", sprintf(\"%.3f\", pearsonCor\$estimate), \" 95% conf.int [\", sprintf(\"%.3f\", pearsonCor\$conf.int[1]),\"-\",sprintf(\"%.3f\", pearsonCor\$conf.int[2]), \"]\", \" p-value = \",  sprintf(\"%.5f\", pearsonCor\$p.value, sep = \"\"))"."\n";
	print R "ggplot(dataFrame, aes(x=$XAxis, y=$YAxis)) + ggtitle(title) + stat_smooth(method = \"lm\", fill = \"grey\", formula = y ~ x, level = 0.999, fullrange=TRUE) + stat_smooth(method = \"lm\", fill = \"darkgrey\", formula = y ~ x, level = 0.99, fullrange=TRUE) + stat_smooth(method = \"lm\", fill = \"blue\", formula = y ~ x, level = 0.95, fullrange=TRUE) + stat_smooth(method = \"lm\", fill = \"purple\", formula = y ~ x, level = 0.90, fullrange=TRUE) + stat_smooth(method = \"lm\", fill = \"red\", formula = y ~ x, level = 0.80, fullrange=TRUE) + stat_smooth(method = \"lm\", fill = \"yellow\", formula = y ~ x, level = 0.60, fullrange=TRUE) + stat_density2d(alpha = 0.8) + geom_point(alpha =0.2, size = 2) "."\n";
	print R "ggsave(file=\"$pdfPath\")\n";
	print R "pearsonCor;\n";
	print R "fitModel <- lm($YAxis ~ $XAxis, data = dataFrame)"."\n";
	print R "summary(fitModel)"."\n";
	print R "confint(fitModel)"."\n";
	close R;
	
	system ("R --slave --vanilla --file=$RScriptPath &>$logPath ");
}
sub plotComparisonScatterPlot {
#....................................................................................................................................................#
#	dependOnSub: ggplotXYScatterPlot|525, reportStatus|957
#	appearInSub: >none
#	primaryAppearInSection: 6_calculateAndPlotEfficiency|160
#	secondaryAppearInSection: >none
#	input: $comparisonInfoHsh_ref, $ggplotDirHsh_ref
#	output: 
#	toCall: &plotComparisonScatterPlot($comparisonInfoHsh_ref, $ggplotDirHsh_ref);
#	calledInLine: 167
#....................................................................................................................................................#
	my ($comparisonInfoHsh_ref, $ggplotDirHsh_ref) = @_;
	
	foreach my $comparison (keys %{$comparisonInfoHsh_ref}) {
		
		&reportStatus("Plotting XY scatter for $comparison",10,"\n"); #->957
		
		#---get the values
		my $plotAry_ref = ();
		push @{$plotAry_ref}, join ",", ($comparisonInfoHsh_ref->{$comparison}{'data'}{$_}{'numeratorLog2Val'},$comparisonInfoHsh_ref->{$comparison}{'data'}{$_}{'denominatorLog2Val'}) foreach (keys %{$comparisonInfoHsh_ref->{$comparison}{'data'}});

		{
			my $nameTag = "$comparison.XYScatter";
			my $XAxis = "log2_$comparisonInfoHsh_ref->{$comparison}{'numerator'}";
			my $YAxis = "log2_$comparisonInfoHsh_ref->{$comparison}{'denominator'}";
			my $dataPath = "$ggplotDirHsh_ref->{'dat'}/$nameTag.dat";
			my $pdfPath = "$ggplotDirHsh_ref->{'pdf'}/$nameTag.pdf";
			my $RScriptPath = "$ggplotDirHsh_ref->{'R'}/$nameTag.R";
			my $logPath = "$ggplotDirHsh_ref->{'log'}/$nameTag.log";
			&ggplotXYScatterPlot($XAxis, $YAxis, $plotAry_ref, $dataPath, $pdfPath, $RScriptPath, $logPath);#->525
		}
	}
	

	return ();
}
sub plotEfficiencyHistogram {
#....................................................................................................................................................#
#	dependOnSub: ggplotHistogram|385, ggplotMultiSampleHistogram|454, reportStatus|957
#	appearInSub: >none
#	primaryAppearInSection: 6_calculateAndPlotEfficiency|160
#	secondaryAppearInSection: >none
#	input: $comparisonInfoHsh_ref, $ggplotDirHsh_ref
#	output: 
#	toCall: &plotEfficiencyHistogram($comparisonInfoHsh_ref, $ggplotDirHsh_ref);
#	calledInLine: 166
#....................................................................................................................................................#
	my ($comparisonInfoHsh_ref, $ggplotDirHsh_ref) = @_;
	
	my $plotAryHsh_ref = {};
	foreach my $comparison (keys %{$comparisonInfoHsh_ref}) {
		
		&reportStatus("Plotting histogram for $comparison",10,"\n"); #->957
		
		#---get the values
		my $plotAry_ref = ();
		push @{$plotAry_ref}, $comparisonInfoHsh_ref->{$comparison}{'data'}{$_}{'medianNorEfficiencyVal'} foreach (keys %{$comparisonInfoHsh_ref->{$comparison}{'data'}});
		$plotAryHsh_ref->{$comparison} = $plotAry_ref;

		{
			my $nameTag = "$comparison.histogram";
			my $dataPath = "$ggplotDirHsh_ref->{'dat'}/$nameTag.dat";
			my $pdfPath = "$ggplotDirHsh_ref->{'pdf'}/$nameTag.pdf";
			my $RScriptPath = "$ggplotDirHsh_ref->{'R'}/$nameTag.R";
			my $logPath = "$ggplotDirHsh_ref->{'log'}/$nameTag.log";
			my $leftXAxisPercentileLimit = 'min';
			my $rightXAxisPercentileLimit = 'max';
			my $binWidth = 0.1;
			my $extraArg = '';
			my $log2OrLinear = 'log2';#-----choose the value to be plot in linear or log2 scale here
			my $XAxis = "efficiency";
			my $dataPtMax = 999999;
			&ggplotHistogram($plotAry_ref, $dataPath, $pdfPath, $RScriptPath, $logPath, $leftXAxisPercentileLimit, $rightXAxisPercentileLimit, $XAxis, $binWidth, $dataPtMax, $extraArg, $log2OrLinear);#->385
		}
	}
	
	{
		&reportStatus("Plotting pooled histogram",10,"\n"); #->957
		my $nameTag = "pooled.efficiency.histogram";
		my $dataPath = "$ggplotDirHsh_ref->{'dat'}/$nameTag.dat";
		my $pdfPath = "$ggplotDirHsh_ref->{'pdf'}/$nameTag.pdf";
		my $RScriptPath = "$ggplotDirHsh_ref->{'R'}/$nameTag.R";
		my $logPath = "$ggplotDirHsh_ref->{'log'}/$nameTag.log";
		my $leftXAxisPercentileLimit = 'min';
		my $rightXAxisPercentileLimit = 'max';
		my $binWidth = 0.1;
		my $log2OrLinear = 'log2';
		my $XAxis = "efficiency";
		my $extraArg = '';
		my $dataPtMax = 999999;
		&ggplotMultiSampleHistogram($plotAryHsh_ref, $dataPath, $pdfPath, $RScriptPath, $logPath, $leftXAxisPercentileLimit, $rightXAxisPercentileLimit, $XAxis, $binWidth, $dataPtMax, $extraArg, $log2OrLinear);#->454
	}

	return ();
}
sub plotRNAAndRiboHistogram {
#....................................................................................................................................................#
#	dependOnSub: ggplotHistogram|385, ggplotMultiSampleHistogram|454, reportStatus|957
#	appearInSub: >none
#	primaryAppearInSection: 5_plotRNAAndRiboCountTypeData|150
#	secondaryAppearInSection: >none
#	input: $RNACtrlStorablePath, $countDataType, $ggplotDirHsh_ref, $riboSeqStorablePath
#	output: 
#	toCall: &plotRNAAndRiboHistogram($riboSeqStorablePath, $RNACtrlStorablePath, $countDataType, $ggplotDirHsh_ref);
#	calledInLine: 155
#....................................................................................................................................................#
	my ($riboSeqStorablePath, $RNACtrlStorablePath, $countDataType, $ggplotDirHsh_ref) = @_;
	
	my %tmpRiboOrRNADataHsh = ('ribo'=>$riboSeqStorablePath, 'RNA'=>$RNACtrlStorablePath);
	
	my $plotAryHsh_ref = {};
	foreach my $RNAOrRibo (keys %tmpRiboOrRNADataHsh) {
		&reportStatus("Plotting $RNAOrRibo $countDataType histogram",10,"\n"); #->957
		my $plotAry_ref = ();
		my $normalizedCountHsh_ref = retrieve($tmpRiboOrRNADataHsh{$RNAOrRibo});
		foreach my $mRNAID (keys %{$normalizedCountHsh_ref->{'CDSRng'}}) {
			if ($normalizedCountHsh_ref->{'CDSRng'}{$mRNAID}{$countDataType}{'s'} and $normalizedCountHsh_ref->{'CDSRng'}{$mRNAID}{$countDataType}{'s'} =~ m/^\d+\.?\d*$/) {
				push @{$plotAry_ref}, $normalizedCountHsh_ref->{'CDSRng'}{$mRNAID}{$countDataType}{'s'};
			}
		}
		$plotAryHsh_ref->{$RNAOrRibo} = $plotAry_ref;
		
		{
			my $nameTag = "$RNAOrRibo.$countDataType.histogram";
			my $dataPath = "$ggplotDirHsh_ref->{'dat'}/$nameTag.dat";
			my $pdfPath = "$ggplotDirHsh_ref->{'pdf'}/$nameTag.pdf";
			my $RScriptPath = "$ggplotDirHsh_ref->{'R'}/$nameTag.R";
			my $logPath = "$ggplotDirHsh_ref->{'log'}/$nameTag.log";
			my $leftXAxisPercentileLimit = 'min';
			my $rightXAxisPercentileLimit = 'max';
			my $binWidth = 0.1;
			my $extraArg = '';
			my $log2OrLinear = 'log2';#-----choose the value to be plot in linear or log2 scale here
			my $XAxis = "log2_$countDataType";
			my $dataPtMax = 999999;
			&ggplotHistogram($plotAry_ref, $dataPath, $pdfPath, $RScriptPath, $logPath, $leftXAxisPercentileLimit, $rightXAxisPercentileLimit, $XAxis, $binWidth, $dataPtMax, $extraArg, $log2OrLinear);#->385
		}
	}
	
	{
		&reportStatus("Plotting pooled $countDataType histogram",10,"\n"); #->957
		my $nameTag = "pooled.$countDataType.histogram";
		my $dataPath = "$ggplotDirHsh_ref->{'dat'}/$nameTag.dat";
		my $pdfPath = "$ggplotDirHsh_ref->{'pdf'}/$nameTag.pdf";
		my $RScriptPath = "$ggplotDirHsh_ref->{'R'}/$nameTag.R";
		my $logPath = "$ggplotDirHsh_ref->{'log'}/$nameTag.log";
		my $leftXAxisPercentileLimit = 'min';
		my $rightXAxisPercentileLimit = 'max';
		my $binWidth = 0.1;
		my $log2OrLinear = 'log2';
		my $XAxis = "log2_$countDataType";
		my $extraArg = '';
		my $dataPtMax = 999999;
		&ggplotMultiSampleHistogram($plotAryHsh_ref, $dataPath, $pdfPath, $RScriptPath, $logPath, $leftXAxisPercentileLimit, $rightXAxisPercentileLimit, $XAxis, $binWidth, $dataPtMax, $extraArg, $log2OrLinear);#->454
	}
	
	return ();
}
sub printCMDLogOrFinishMessage {
#....................................................................................................................................................#
#	dependOnSub: currentTime|240
#	appearInSub: >none
#	primaryAppearInSection: 0_startingTasks|72, 7_finishingTasks|173
#	secondaryAppearInSection: >none
#	input: $CMDLogOrFinishMessage
#	output: none
#	toCall: &printCMDLogOrFinishMessage($CMDLogOrFinishMessage);
#	calledInLine: 78, 178
#....................................................................................................................................................#

	my ($CMDLogOrFinishMessage) = @_;
	
	if ($CMDLogOrFinishMessage eq "CMDLog") {
		#---open a log file if it doesnt exists
		my $absoluteScriptPath = abs_path($0);
		my $dirPath = dirname(rel2abs($absoluteScriptPath));
		my ($scriptName, $callScriptPath, $scriptSuffix) = fileparse($absoluteScriptPath, qr/\.[^.]*/);
		open (CMDLOG, ">>$dirPath/$scriptName.cmd.log.txt"); #---append the CMD log file
		print CMDLOG "[".&currentTime()."]\t"."$dirPath/$scriptName$scriptSuffix ".(join " ", @ARGV)."\n";#->240
		close CMDLOG;
		print "\n=========================================================================\n";
		print "[".&currentTime()."] starts running ...... \n";#->240
		print "=========================================================================\n\n";

	} elsif ($CMDLogOrFinishMessage eq "finishMessage") {
		print "\n=========================================================================\n";
		print "[".&currentTime()."] finished running .......\n";#->240
		print "=========================================================================\n\n";
	}
}
sub printComparisonData {
#....................................................................................................................................................#
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 6_calculateAndPlotEfficiency|160
#	secondaryAppearInSection: >none
#	input: $comparisonInfoHsh_ref, $logDir, $mRNAInfoHsh_ref
#	output: 
#	toCall: &printComparisonData($comparisonInfoHsh_ref, $logDir, $mRNAInfoHsh_ref);
#	calledInLine: 168
#....................................................................................................................................................#
	my ($comparisonInfoHsh_ref, $logDir, $mRNAInfoHsh_ref) = @_;
	
	foreach my $comparison (keys %{$comparisonInfoHsh_ref}) {
		open (LOGFILE, ">", "$logDir/$comparison.data.xls");
		my $numerator = $comparisonInfoHsh_ref->{$comparison}{'numerator'};
		my $denominator = $comparisonInfoHsh_ref->{$comparison}{'denominator'};
		my @outputAry = ('mRNAID', 'description', 'linear_'.$numerator, 'log2'.$numerator, 'linear_'.$denominator, 'log2_'.$denominator, 'efficiency', 'normalized_efficiency');
		print LOGFILE join '', ((join "\t", @outputAry), "\n");
		foreach my $mRNAID (keys %{$comparisonInfoHsh_ref->{$comparison}{'data'}}) {
			my @outputAry = ();
			push @outputAry, $mRNAID;
			push @outputAry, $mRNAInfoHsh_ref->{$mRNAID}{'description'};
			push @outputAry, $comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'numeratorLinearVal'};
			push @outputAry, $comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'numeratorLog2Val'};
			push @outputAry, $comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'denominatorLinearVal'};
			push @outputAry, $comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'denominatorLog2Val'};
			push @outputAry, $comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'efficiencyVal'};
			push @outputAry, $comparisonInfoHsh_ref->{$comparison}{'data'}{$mRNAID}{'medianNorEfficiencyVal'};
			print LOGFILE join '', ((join "\t", @outputAry), "\n");
		}
		
		close LOGFILE;
	}

	return ();
}
sub readGFF_oneRNAPerGene {
#....................................................................................................................................................#
#	dependOnSub: currentTime|240
#	appearInSub: >none
#	primaryAppearInSection: 4_processInputData|132
#	secondaryAppearInSection: >none
#	input: $gffPath
#	output: $geneInfoHsh_ref
#	toCall: my ($geneInfoHsh_ref) = &readGFF_oneRNAPerGene($gffPath);
#	calledInLine: 140
#....................................................................................................................................................#

	my ($gffPath) = @_;

	my $geneInfoHsh_ref = {};
	
	#---read the gff
	my $geneByRNAHsh_ref = {};

	open (GFF, $gffPath);
	print "[".&currentTime()."] Reading: $gffPath\n";#->240
	while (my $theLine = <GFF>) {

		chomp $theLine;

		last if $theLine =~ m/^##FASTA/;

		if ($theLine !~ m/^\#|^\@/ and $theLine !~ m/\tsupercontig\t/) {

			my ($seq, undef, $geneCategory, $featureStart, $featureEnd, undef, $geneStrd, undef, $dscrptns) = split (/\t/, $theLine);
			
			#----assigne all non -/+ will be treated as plus
			$geneStrd = "+" if (($geneStrd ne "-") and ($geneStrd ne "+"));
			
			my @dscrptnsSplt = split /;/, $dscrptns;
			my ($unqID, $parent);
			my $geneName = "unknown";
			foreach my $theDscptn (@dscrptnsSplt) {
				if ($theDscptn =~ m/^ID=/) {$unqID = substr ($theDscptn, index ($theDscptn, "=")+1);}
				if ($theDscptn =~ m/^Parent=/) {$parent = substr ($theDscptn, index ($theDscptn, "=")+1);}
				if ($theDscptn =~ m/^description=/) {$geneName = substr ($theDscptn, index ($theDscptn, "=")+1);}
			}

			if ($geneCategory eq "gene") {#---gene
				
				my $geneID = $unqID;
				
				$geneInfoHsh_ref->{$geneID}{'strnd'} = $geneStrd;
				$geneInfoHsh_ref->{$geneID}{'cntg'} = $seq;
				$geneInfoHsh_ref->{$geneID}{'description'} = $geneName;
				$geneInfoHsh_ref->{$geneID}{'geneRng'} = join ",", ($featureStart, $featureEnd);

			} elsif ($geneCategory eq "CDS") {#---Only for coding genes
				
				my $RNAID = $parent;
				my $geneID = $geneByRNAHsh_ref->{$RNAID};
				push @{$geneInfoHsh_ref->{$geneID}{'CDS'}}, join ",", ($featureStart, $featureEnd);
				
			} elsif ($geneCategory eq "exon") {#---exon, may be exons of alternative transcripts, wiull sort out later
				my $RNAID = $parent;
				my $geneID = $geneByRNAHsh_ref->{$RNAID};
				push @{$geneInfoHsh_ref->{$geneID}{'exon'}}, join ",", ($featureStart, $featureEnd);
				
			} else {#---can be tRNA, rRNA, mRNA, repRNA, ncRNA
				my $RNAID = $unqID;
				my $geneID = $parent;
				$geneByRNAHsh_ref->{$RNAID} = $geneID;
				$geneInfoHsh_ref->{$geneID}{'ctgry'} = $geneCategory;
				$geneInfoHsh_ref->{$geneID}{'RNARng'} = join ",", ($featureStart, $featureEnd);
				$geneInfoHsh_ref->{$geneID}{'RNAID'} = $RNAID;

			}
		}#---end of if (($theLine !~ m/^\#|^\@/) and ($theLine !~ m/\tsupercontig\t/)) {
	}#---end of while (my $theLine = <INFILE>)
	close GFF;
	
	return ($geneInfoHsh_ref);
}
sub readMultiFasta {
#....................................................................................................................................................#
#	dependOnSub: reportStatus|957
#	appearInSub: >none
#	primaryAppearInSection: 4_processInputData|132
#	secondaryAppearInSection: >none
#	input: $fastaPath
#	output: $fastaHsh_ref
#	toCall: my ($fastaHsh_ref) = &readMultiFasta($fastaPath);
#	calledInLine: 139
#....................................................................................................................................................#

	my ($fastaPath) = @_;

	my ($seq, $seqName);
	my $fastaHsh_ref = {};
	my $i = 0;

	&reportStatus("Reading: $fastaPath", 0, "\n");#->957
	
	open (INFILE, $fastaPath);
	chomp (my $curntLine = <INFILE>); #get the first line
	while (my $nextLine = <INFILE>) {
		chomp $nextLine;
		
		#---Only two types of line in current line, the header or seq
		if ($curntLine =~ m/^>/) {#-- header line
			my @theLineSplt = split (/ *\|/, $curntLine);
			$seqName = $theLineSplt[0]; #---get the first tag
			$seqName =~ s/ //g; #---remove space
			$seqName =~ s/>//g; #---remove space
		} else {#--seq line
			$seq = $seq.$curntLine;
		}
		
		#---check if next line has a > or that's the end of file
		if ($nextLine =~ m/^>/) {
			$seq =~ tr/a-z/A-Z/;
			$fastaHsh_ref->{$seqName} = $seq;
			$seq = "";
		} elsif (eof(INFILE)) {#---this is the last line
			$seq =~ tr/a-z/A-Z/;
			$seq = $seq.$nextLine;
			$fastaHsh_ref->{$seqName} = $seq;
		}
		
		#---next line becomes current line
		$curntLine = $nextLine;
	}

	close INFILE;
	return ($fastaHsh_ref);
}
sub readParameters {
#....................................................................................................................................................#
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 0_startingTasks|72
#	secondaryAppearInSection: >none
#	input: none
#	output: $RNACtrlStorablePath, $fastaPath, $gffPath, $maxThread, $outDir, $proteomeDataTSVPath, $riboSeqStorablePath
#	toCall: my ($gffPath, $fastaPath, $riboSeqStorablePath, $RNACtrlStorablePath, $proteomeDataTSVPath, $maxThread, $outDir) = &readParameters();
#	calledInLine: 80
#....................................................................................................................................................#
	
	my ($gffPath, $fastaPath, $riboSeqStorablePath, $RNACtrlStorablePath, $proteomeDataTSVPath, $maxThread, $outDir);
	
	$maxThread = 4;
	my $dirPath = dirname(rel2abs($0));
	$outDir = "$dirPath/translationEfficiencyPlotter/";
	
	GetOptions 	("gffPath=s"  => \$gffPath,
				 "fastaPath=s"  => \$fastaPath,
				 "riboSeqStorablePath=s"  => \$riboSeqStorablePath,
				 "RNACtrlStorablePath=s"  => \$RNACtrlStorablePath,
				 "proteomeDataTSVPath=s"  => \$proteomeDataTSVPath,
				 "maxThread:i"  => \$maxThread,
				 "outDir:s"  => \$outDir)

	or die		("Error in command line arguments\n");
	
	#---check file
	foreach my $fileToCheck ($gffPath, $fastaPath, $riboSeqStorablePath, $RNACtrlStorablePath, $proteomeDataTSVPath) {
		die "Can't read $fileToCheck" if not -s $fileToCheck;
	}

	system "mkdir -p -m 777 $outDir/";

	return($gffPath, $fastaPath, $riboSeqStorablePath, $RNACtrlStorablePath, $proteomeDataTSVPath, $maxThread, $outDir);
}
sub reportStatus {
#....................................................................................................................................................#
#	dependOnSub: currentTime|240
#	appearInSub: calculateEfficiency|188, getCtgryGeneInfo|290, getProteomeData|326, getRiboOrRNAData|357, plotComparisonScatterPlot|562, plotEfficiencyHistogram|598, plotRNAAndRiboHistogram|657, readMultiFasta|867
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 4_processInputData|132, 5_plotRNAAndRiboCountTypeData|150, 6_calculateAndPlotEfficiency|160
#	input: $lineEnd, $message, $numTrailingSpace
#	output: 
#	toCall: &reportStatus($message, $numTrailingSpace, $lineEnd);
#	calledInLine: 213, 308, 321, 338, 352, 369, 380, 576, 613, 638, 673, 701, 884
#....................................................................................................................................................#
	my ($message, $numTrailingSpace, $lineEnd) = @_;

	my $trailingSpaces = '';
	$trailingSpaces .= " " for (1..$numTrailingSpace);
	
	print "[".&currentTime()."] ".$message.$trailingSpaces.$lineEnd;#->240

	return ();
}

exit;
